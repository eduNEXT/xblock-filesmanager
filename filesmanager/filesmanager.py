"""TO-DO: Write a description of what this XBlock is."""
import logging

import pkg_resources
import re
from django.utils import translation
from xblock.core import XBlock
from xblock.fields import Integer, Scope, List
from xblock.fragment import Fragment
from xblockutils.resources import ResourceLoader

from urllib.parse import urljoin

from django.conf import settings

from http import HTTPStatus
from webob.response import Response

try:
    from cms.djangoapps.contentstore.exceptions import AssetNotFoundException
    from opaque_keys.edx.keys import AssetKey
    from openedx.core.djangoapps.site_configuration import helpers as configuration_helpers
    from xmodule.contentstore.content import StaticContent
    from xmodule.contentstore.django import contentstore
except ImportError:
    AssetNotFoundException = None
    configuration_helpers = None
    StaticContent = None
    contentstore = None
    AssetKey = None

log = logging.getLogger(__name__)

class FilesManagerXBlock(XBlock):
    """
    Example of directories list:
    [
        {
            "name": "Folder 1",
            "type": "folder",
            "path": "folder1",
            "metadata": {
                "id": ..,
                ...
            },
            "children": [
                {
                    "name": "File 1",
                    "type": "file",
                    "path": "folder1/file1"
                    "metadata": {
                        "id": ..,
                        "asset_key": ..,
                        "display_name": ..,
                        "url": ..,
                        "content_type": ..,
                        "file_size": ..,
                        "external_url": ..,
                        "thumbnail": ..,
                    },
                {
                    "name": "Folder 2",
                    "type": "folder",
                    "path": "folder1/folder2",
                    "metadata": {
                        "id": ..,
                        ...
                    },
                    "children": [
                        {
                            "name": "File 2",
                            "type": "file",
                            "path": "folder1/folder2/file2"
                            "metadata": {
                                "id": ..,
                                "asset_key": ..,
                                "display_name": ..,
                                "url": ..,
                                "content_type": ..,
                                "file_size": ..,
                                "external_url": ..,
                                "thumbnail": ..,
                            },
                        }
                    ]
                }
            ]
    ]
    """

    directories = List(
        default=[],
        scope=Scope.settings,
        help="List of directories to be displayed in the Files Manager."
    )

    incremental_directory_id = Integer(
        default=0,
        scope=Scope.settings,
        help="Incremental ID for directories."
    )

    def resource_string(self, path):
        """Handy helper for getting resources from our kit."""
        data = pkg_resources.resource_string(__name__, path)
        return data.decode("utf8")

    # TO-DO: change this view to display your data your own way.
    def student_view(self, context=None):
        """
        The primary view of the FilesManagerXBlock, shown to students
        when viewing courses.
        """
        if context:
            pass  # TO-DO: do something based on the context.

        # Remove the bundle default generated by webpack
        script_to_remove = r'<script defer="defer" src="bundle.js"></script>'

        html = self.resource_string("static/html/index.html")
        html_without_script = re.sub(script_to_remove, '', html)
        frag = Fragment(html_without_script.format(self=self))
        frag.add_css(self.resource_string("static/css/filesmanager.css"))

        # Add i18n js
        # statici18n_js_url = self._get_statici18n_js_url()
        # if statici18n_js_url:
            #frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        # Adding the correct route of the bundle
        frag.add_javascript(self.resource_string("static/html/bundle.js"))
        frag.initialize_js('FilesManagerXBlock')

        return frag

    def studio_view(self, context=None):
        """
        The edit view of the FilesManagerXBlock in Studio.
        """
        if context:
            pass  # TO-DO: do something based on the context.
        html = self.resource_string("static/html/filesmanager.html")
        frag = Fragment(html.format(self=self))
        frag.add_css(self.resource_string("static/css/filesmanager.css"))

        # Add i18n js
        statici18n_js_url = self._get_statici18n_js_url()
        if statici18n_js_url:
            frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        frag.add_javascript(self.resource_string("static/js/src/filesmanager.js"))
        frag.initialize_js('FilesManagerXBlock')
        return frag

    @XBlock.json_handler
    def get_directories(self, data, suffix=''):
        return {
            "content": self.directories,
        }

    @XBlock.json_handler
    def clear_directories(self, data, suffix=''):
        self.directories = []
        self.incremental_directory_id = 0
        return {
            "content": self.directories,
        }

    @XBlock.json_handler
    def get_content(self, data, suffix=''):
        path = data.get("path")
        if not path:
            return {}
        content, _, _ = self.get_content_by_path(path)
        return {
            "status": "success",
            "content": content,
        }

    @XBlock.json_handler
    def add_directory(self, data, suffix=''):
        directory_name = data.get("name")
        path = data.get("path")
        target_directory = self.get_target_directory(path)
        target_directory.append(
            {
                "name": directory_name,
                "type": "directory",
                "path": f"{path}/{directory_name}" if path else directory_name,
                "metadata": {
                    "id": self.incremental_directory_id,
                },
                "children": [],
            }
        )
        self.incremental_directory_id += 1
        return {
            "content": target_directory,
        }

    @XBlock.handler
    def upload_files(self, request, suffix=''):  # pylint: disable=unused-argument
        """Handler for file upload to the course assets."""
        # Temporary fix for supporting both contentstore assets management versions (master / Palm)
        try:
            from cms.djangoapps.contentstore.views.assets import update_course_run_asset  # pylint: disable=import-outside-toplevel
        except ImportError:
            from cms.djangoapps.contentstore.asset_storage_handler import update_course_run_asset  # pylint: disable=import-outside-toplevel
        path = request.params.get("path")
        target_directory = self.get_target_directory(path)
        for type, file in request.params.items():
            if not type.startswith("file"):
                continue
            try:
                content = update_course_run_asset(self.course_id, file.file)
                target_directory.append(
                    {
                        "name": file.filename,
                        "type": "file",
                        "path": f"{path}/{file.filename}" if path else file.filename,
                        "metadata": self.get_asset_json_from_content(content),
                    }
                )
            except Exception as e:  # pylint: disable=broad-except
                log.exception(e)
                return Response(status=HTTPStatus.INTERNAL_SERVER_ERROR)

        return Response(
            status=HTTPStatus.OK,
            json_body=target_directory,
        )

    @XBlock.json_handler
    def delete_content(self, data, suffix=''):
        path = data.get("path")
        if not path:
            return {}
        content, index, parent_directory = self.get_content_by_path(path)
        if content:
            del parent_directory[index]
            self.delete_content_from_assets(content)
        return {
            "content": parent_directory,
        }

    def get_target_directory(self, path):
        target_directory = self.directories
        if path:
            target_directory, _, _ = self.get_content_by_path(path)
            if not target_directory:
                return {}
            target_directory = target_directory["children"]
        return target_directory

    def get_asset_json_from_content(self, content):
        """Serialize the content object to a JSON serializable object. """
        asset_url = StaticContent.serialize_asset_key_with_slash(content.location)
        thumbnail_url = StaticContent.serialize_asset_key_with_slash(content.thumbnail_location)
        return {
            "id": str(content.get_id()),
            "asset_key": str(content.location),
            "display_name": content.name,
            "url": str(asset_url),
            "content_type": content.content_type,
            "file_size": content.length,
            "external_url": urljoin(configuration_helpers.get_value('LMS_ROOT_URL', settings.LMS_ROOT_URL), asset_url),
            "thumbnail": urljoin(configuration_helpers.get_value('LMS_ROOT_URL', settings.LMS_ROOT_URL), thumbnail_url),
        }

    def get_content_by_path(self, path):
        path_tree = path.split("/")
        parent_directory = self.directories
        for directory in path_tree:
            for index, content in enumerate(parent_directory):
                if content["path"] == path:
                    return content, index, parent_directory
                if content["type"] == "directory" and content["name"] == directory:
                    parent_directory = content["children"]
                    break
        return None, None, None

    def delete_content_from_assets(self, content):
        if content.get("type") == "file":
            if asset_key := content.get("metadata", {}).get("asset_key"):
                self.delete_asset(asset_key)
                return
        for child in content.get("children", []):
            if asset_key := child.get("metadata", {}).get("asset_key"):
                self.delete_asset(asset_key)
                continue
            if child.get("type") == "directory":
                self.delete_content_from_assets(child)

    def delete_asset(self, asset_key):
        try:
            from cms.djangoapps.contentstore.views.assets import delete_asset  # pylint: disable=import-outside-toplevel
        except ImportError:
            from cms.djangoapps.contentstore.asset_storage_handler import delete_asset  # pylint: disable=import-outside-toplevel
        asset_key = AssetKey.from_string(asset_key)
        try:
            delete_asset(self.course_id, asset_key)
        except AssetNotFoundException as e:  # pylint: disable=broad-except
            log.exception(e)

    # TO-DO: change this to create the scenarios you'd like to see in the
    # workbench while developing your XBlock.
    @staticmethod
    def workbench_scenarios():
        """A canned scenario for display in the workbench."""
        return [
            ("FilesManagerXBlock",
             """<filesmanager/>
             """),
            ("Multiple FilesManagerXBlock",
             """<vertical_demo>
                <filesmanager/>
                <filesmanager/>
                <filesmanager/>
                </vertical_demo>
             """),
        ]

    @staticmethod
    def _get_statici18n_js_url():
        """
        Returns the Javascript translation file for the currently selected language, if any.
        Defaults to English if available.
        """
        locale_code = translation.get_language()
        if locale_code is None:
            return None
        text_js = 'public/js/translations/{locale_code}/text.js'
        lang_code = locale_code.split('-')[0]
        for code in (locale_code, lang_code, 'en'):
            loader = ResourceLoader(__name__)
            if pkg_resources.resource_exists(
                    loader.module_name, text_js.format(locale_code=code)):
                return text_js.format(locale_code=code)
        return None

    @staticmethod
    def get_dummy():
        """
        Dummy method to generate initial i18n
        """
        return translation.gettext_noop('Dummy')
