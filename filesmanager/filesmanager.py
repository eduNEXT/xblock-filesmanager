"""TO-DO: Write a description of what this XBlock is."""

import pkg_resources
import re
from django.utils import translation
from xblock.core import XBlock
from xblock.fields import Integer, Scope, List
from xblock.fragment import Fragment
from xblockutils.resources import ResourceLoader


class FilesManagerXBlock(XBlock):
    """
    TO-DO: document what your XBlock does.
    """

    """
    Example of directories list:
    [
        {
            "name": "Folder 1",
            "type": "folder",
            "path": "folder1",
            "metadata": {
                "id": ..,
                ...
            },
            "children": [
                {
                    "name": "File 1",
                    "type": "file",
                    "path": "folder1/file1"
                    "metadata": {
                        "id": ..,
                        "asset_key": ..,
                        "display_name": ..,
                        "url": ..,
                        "content_type": ..,
                        "file_size": ..,
                        "external_url": ..,
                        "thumbnail": ..,
                    },
                {
                    "name": "Folder 2",
                    "type": "folder",
                    "path": "folder1/folder2",
                    "metadata": {
                        "id": ..,
                        ...
                    },
                    "children": [
                        {
                            "name": "File 2",
                            "type": "file",
                            "path": "folder1/folder2/file2"
                            "metadata": {
                                "id": ..,
                                "asset_key": ..,
                                "display_name": ..,
                                "url": ..,
                                "content_type": ..,
                                "file_size": ..,
                                "external_url": ..,
                                "thumbnail": ..,
                            },
                        }
                    ]
                }
            ]
    ]
    """
    directories = List(
        default=[],
        scope=Scope.settings,
        help="List of directories to be displayed in the Files Manager."
    )

    incremental_directory_id = Integer(
        default=0,
        scope=Scope.settings,
        help="Incremental ID for directories."
    )

    def resource_string(self, path):
        """Handy helper for getting resources from our kit."""
        data = pkg_resources.resource_string(__name__, path)
        return data.decode("utf8")

    # TO-DO: change this view to display your data your own way.
    def student_view(self, context=None):
        """
        The primary view of the FilesManagerXBlock, shown to students
        when viewing courses.
        """
        if context:
            pass  # TO-DO: do something based on the context.

        # Remove the bundle default generated by webpack
        script_to_remove = r'<script defer="defer" src="bundle.js"></script>'

        html = self.resource_string("static/html/index.html")
        html_without_script = re.sub(script_to_remove, '', html)
        frag = Fragment(html_without_script.format(self=self))
        frag.add_css(self.resource_string("static/css/filesmanager.css"))

        # Add i18n js
        # statici18n_js_url = self._get_statici18n_js_url()
        # if statici18n_js_url:
            #frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        # Adding the correct route of the bundle
        frag.add_javascript(self.resource_string("static/html/bundle.js"))
        frag.initialize_js('FilesManagerXBlock')

        return frag

    def studio_view(self, context=None):
        """
        The edit view of the FilesManagerXBlock in Studio.
        """
        if context:
            pass  # TO-DO: do something based on the context.
        html = self.resource_string("static/html/filesmanager.html")
        frag = Fragment(html.format(self=self))
        frag.add_css(self.resource_string("static/css/filesmanager.css"))

        # Add i18n js
        statici18n_js_url = self._get_statici18n_js_url()
        if statici18n_js_url:
            frag.add_javascript_url(self.runtime.local_resource_url(self, statici18n_js_url))

        frag.add_javascript(self.resource_string("static/js/src/filesmanager.js"))
        frag.initialize_js('FilesManagerXBlock')
        return frag

    @XBlock.json_handler
    def get_directories(self, data, suffix=''):
        return {
            "content": self.directories,
        }

    @XBlock.json_handler
    def get_content(self, data, suffix=''):
        """
        An example handler, which increments the data.
        """
        content_id = data.get("content_id")
        content_type = data.get("type")
        path = data.get("path")
        if not path:
            return {}
        return {
            "status": "success",
            "content": self.get_content_by_path(path, content_id, content_type)
        }

    @XBlock.json_handler
    def add_directory(self, data, suffix=''):
        """
        An example handler, which increments the data.
        """
        directory_name = data.get("name")
        path = data.get("path")
        target_directory = self.directories
        if path:
            target_directory = self.get_content_by_path(path)
            if not target_directory:
                return {}
            target_directory = target_directory["children"]
        target_directory.append(
            {
                "name": directory_name,
                "type": "directory",
                "path": f"{path}/{directory_name}" if path else directory_name,
                "metadata": {
                    "id": self.incremental_directory_id,
                },
                "children": [],
            }
        )
        self.incremental_directory_id += 1
        return {
            "content": target_directory,
        }

    def get_content_by_path(self, path, content_id=None, content_type=None):
        """
        An example handler, which increments the data.
        """
        path_tree = path.split("/")
        current_content = self.directories
        for directory in path_tree:
            for content in current_content:
                # is_content = str(content_id) == str(content["metadata"]["id"]) and content_type == content["type"]
                # correct_path = content["path"] == path
                if content["path"] == path:
                    return content
                if content["type"] == "folder" and content["name"] == directory:
                    current_content = content["children"]
                    break
        if isinstance(current_content, list):
            return {}
        return current_content

    # TO-DO: change this to create the scenarios you'd like to see in the
    # workbench while developing your XBlock.
    @staticmethod
    def workbench_scenarios():
        """A canned scenario for display in the workbench."""
        return [
            ("FilesManagerXBlock",
             """<filesmanager/>
             """),
            ("Multiple FilesManagerXBlock",
             """<vertical_demo>
                <filesmanager/>
                <filesmanager/>
                <filesmanager/>
                </vertical_demo>
             """),
        ]

    @staticmethod
    def _get_statici18n_js_url():
        """
        Returns the Javascript translation file for the currently selected language, if any.
        Defaults to English if available.
        """
        locale_code = translation.get_language()
        if locale_code is None:
            return None
        text_js = 'public/js/translations/{locale_code}/text.js'
        lang_code = locale_code.split('-')[0]
        for code in (locale_code, lang_code, 'en'):
            loader = ResourceLoader(__name__)
            if pkg_resources.resource_exists(
                    loader.module_name, text_js.format(locale_code=code)):
                return text_js.format(locale_code=code)
        return None

    @staticmethod
    def get_dummy():
        """
        Dummy method to generate initial i18n
        """
        return translation.gettext_noop('Dummy')
